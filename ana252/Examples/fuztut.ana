#-------------------------------------------------------------------------------
#  generated by ANA 2.50
#  Fri Apr 04 18:10:03 1997
#-------------------------------------------------------------------------------
@START_BFL
@END_BFL

@START_BLOCK "laplace"
#  Block Laplace for ANA 2.x
#  G(s) = 1/((1+0.1*s)*(1+s))
#  generated by ANAlaplace Wizard 2.50
#  Fri Apr 04 16:12:42 1997
#
$ WIZARD Laplace "1/((1+0.1*s)*(1+s))"
BLOCK Laplace;
$ BLOCKDIM -1 -1 8 4
$ TEXT "G(s) = 1/((1+0.1"
$      "*s)*(1+s))"
$ TEXTALIG 1 1 1 1
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 4 4
$ ICONALIG 1 1 1
INPUT
   u "[1] Laplace Eingang";
OUTPUT
   y "[1] Laplace Ausgang";
STATE
   x1 "[1] Laplace";
   x2 "[1] Laplace";
VAR
   yp "derivate";
SIM
   x1 .= - 10.*x2 + 10.*u;
   x2 .= yp;
   yp  = x1 - 11.*x2;
   y   = x2;
ENDSIM
ENDBLOCK Laplace;
@END_BLOCK

@START_BLOCK "fuzzy"
#  Fuzzy-Block fuzzy für ANA V2.x
#
#  erstellt von ANAfuzzy Wizard 2.50
#  Fri Apr 04 18:09:28 1997
#
#  Das FUZZYmdl-Script ist im Wizard Block enthalten.
#
$WIZARD Fuzzy "C:\ana250\temp\InWizard.afb"
#FBLOCK FPI_Regler;
#
#CONFIGURATION;
#   AND_METHOD = min;
#   OR_METHOD = max;
#   INFERENCE_METHOD = max_prod;
#   DEFUZZIFICATION_METHOD = centroid;
#ENDCONFIGURATION;
#
#INPUTVAR error;
#   XMIN -130.;
#   XMAX 130.;
#   GRID 1.;
#
#   MEMBER nl;
#      TRAPEZ -130., 0., 0., 130.;
#      COLOR cyan;
#   ENDMEMBER;
#
#   MEMBER neg;
#      TRAPEZ -130., -130., -130., 0.;
#      COLOR brown;
#   ENDMEMBER;
#
#   MEMBER pos;
#      TRAPEZ 0., 130., 130., 130.;
#      COLOR grey;
#   ENDMEMBER;
#ENDINPUTVAR;
#
#INPUTVAR derror;
#   XMIN -130.;
#   XMAX 130.;
#   GRID 1.;
#
#   MEMBER nl;
#      TRAPEZ -130., 0., 0., 130.;
#      COLOR cyan;
#   ENDMEMBER;
#
#   MEMBER pos;
#      TRAPEZ 0., 130., 130., 130.;
#      COLOR grey;
#   ENDMEMBER;
#
#   MEMBER neg;
#      TRAPEZ -130., -130., -130., 0.;
#      COLOR brown;
#   ENDMEMBER;
#ENDINPUTVAR;
#
#OUTPUTVAR deltau;
#   XMIN -130.;
#   XMAX 130.;
#   GRID 1.;
#
#   MEMBER nl;
#      SINGLETON 0.;
#      COLOR cyan;
#   ENDMEMBER;
#
#   MEMBER ng;
#      SINGLETON -130.;
#      COLOR brown;
#   ENDMEMBER;
#
#   MEMBER nk;
#      SINGLETON -65.;
#      COLOR grey;
#   ENDMEMBER;
#
#   MEMBER pk;
#      SINGLETON 65.;
#      COLOR magenta;
#   ENDMEMBER;
#
#   MEMBER pg;
#      SINGLETON 130.;
#      COLOR blue;
#   ENDMEMBER;
#ENDOUTPUTVAR;
#
#RULEBASE;
## Die erste Regel beschreibt, wann die Stellgroessenaenderung
## negativ-gross sein soll
#   IF error==neg AND derror==neg THEN deltau=ng;
#
## Diese Regeln beschreiben geringe Abweichungen vom Sollwert
#   IF error==neg AND derror==nl THEN deltau=nk;
#   IF error==nl AND derror==neg THEN deltau=nk;
#
## Diese Regeln beruecksichtigen Gebiete um die Ruhelage
#   IF error==neg AND derror==pos THEN deltau=nl;
#   IF error==nl AND derror==nl THEN deltau=nl;
#   IF error==pos AND derror==neg THEN deltau=nl;
#
## Diese Regeln beschreiben geringe Abweichungen vom Sollwert
#   IF error==nl AND derror==pos THEN deltau=pk;
#   IF error==pos AND derror==nl THEN deltau=pk;
#
## Die letzte Regel beschreibt, wann die Stellgroessenaenderung
## positiv-gross sein soll
#   IF error==pos AND derror==pos THEN deltau=pg;
#ENDRULEBASE;
#
#ENDFBLOCK;
BLOCK fuzzy;
$ BLOCKDIM -1 -1 8 9
$ TEXT "FPI_Regler"
$ TEXTALIG 1 2 1 1
$ ICONNAME "fuzzy"
$ ICONDIM 5 3 
$ ICONALIG 1 0 0 

INPUT
   error "[1] Eingang0";
   derror "[1] Eingang1";

OUTPUT
   deltau "[1] Ausgang0";

PARAMETER
   kerror = 1.0 "[1] Verstaerkung Eingang0";
   kderror = 1.0 "[1] Verstaerkung Eingang1";
   kdeltau = 1.0 "[1] Verstaerkung Ausgang0";
   Tr = 0.05 "[s] Abtastzeit";

VAR
   deltaud DISCRETE "Fuzzy-Ausgang 0";
   blockhandle DISCRETE;

SIM
   deltau = kdeltau*deltaud;
ENDSIM

PROCEDURE simulate_step;
   FZSETINPUT(blockhandle,0,error*kerror);
   FZSETINPUT(blockhandle,1,derror*kderror);
   FZSIMULATE(blockhandle);
   deltaud = FZGETOUTPUT(blockhandle,0);
   STORE ALL;
   SCHEDULE simulate_step AT NOW+Tr;
ENDPROCEDURE

PROCEDURE exit_simulation;
   FZEXIT(blockhandle);
ENDPROCEDURE

INIT
   blockhandle = FZINIT(TYPENAME);
   deltaud = 0;
   SCHEDULE simulate_step AT NOW;
   SCHEDULE exit_simulation AT EXIT;
ENDINIT

ENDBLOCK fuzzy;
@END_BLOCK

@END_LOCALLIB
#-------------------------------------------------------------------------------

CIRCUIT GedGen; # fuztut.ana
USE laplace AS B_1 
$ BLOCKLIB Local
$ BLOCKDIM 50 7 11 5
$ TEXT "         1"
$      "G(s)=  --------------------"
$      "          (1+0.1s)(1+s)"
$ TEXTALIG 1 1 1 1 
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 9 4
$ ICONALIG 1 1 1
$ SIGNAMES
$    "y"
$ ENDSIGNAMES
ENDUSE
USE ainteg AS B_2 
$ BLOCKLIB ANA1.x_KompLib.
    Ti = 0.3;
    AB = 0.0;
$ BLOCKDIM 41 7 6 5
$ TEXT "Integrator"
$ TEXTALIG 1 1 1 1 
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 4 4
$ ICONALIG 1 0 1
$ SIGNAMES
$    "y_1"
$ ENDSIGNAMES
ENDUSE
USE adiff AS B_3 
$ BLOCKLIB ANA1.x_KompLib.
    Td = 0.3;
    N = 100.0;
$ BLOCKDIM 21 3 6 3
$ TEXT "DT1"
$ TEXTALIG 1 1 1 1 
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 4 2
$ ICONALIG 1 1 1
$ SIGNAMES
$    "derror"
$ ENDSIGNAMES
ENDUSE
USE aadd2 AS B_4 
$ BLOCKLIB ANA1.x_KompLib.
    k1 = 1;
    k2 = -1;
$ BLOCKDIM 11 3 6 3
$ TEXT "Addierer"
$ TEXTALIG 1 1 1 1 
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 4 2
$ ICONALIG 1 1 1
$ SIGNAMES
$    "error"
$ ENDSIGNAMES
ENDUSE
USE asprung AS B_5 
$ BLOCKLIB ANA1.x_KompLib.
    A = 20;
    T = 0;
    A0 = 0;
$ BLOCKDIM 1 1 6 5
$ TEXT "Sprung"
$ TEXTALIG 1 1 1 1 
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 4 4
$ ICONALIG 1 1 1
$ SIGNAMES
$    "yref"
$ ENDSIGNAMES
ENDUSE
USE acontrol AS B_6 
$ BLOCKLIB ANA1.x_KompLib.
    te = 5;
    h = 0.05;
$ BLOCKDIM 1 12 6 5
$ TEXT ""
$ TEXTALIG 1 2 0 1 
$ ICONNAME "control"
$ ICONDIM 2 2
$ ICONALIG 1 0 0
$ SIGNAMES
$    "-|"
$ ENDSIGNAMES
ENDUSE
USE bframe1 AS B_7 
$ BLOCKLIB Misc_1
$ BLOCKDIM 18 1 31 15
$ TEXT ""
$ TEXTALIG 1 1 1 1 0 1 100 100 100 255 255 128
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 29 14
$ ICONALIG 1 1 1
$ SIGNAMES
$ ENDSIGNAMES
ENDUSE
USE btext1 AS B_8 
$ BLOCKLIB Misc_1
$ BLOCKDIM 40 1 9 2
$ TEXT "Fuzzy PI-Regler"
$ TEXTALIG 1 1 1 1 1.00
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 7 1
$ ICONALIG 1 1 1
$ SIGNAMES
$ ENDSIGNAMES
ENDUSE
USE ana AS B_16 
$ BLOCKLIB Misc_1
$ BLOCKDIM 42 17 21 2
$ TEXT "ANA 2.x (c) TU Wien 1986-97"
$ TEXTALIG 1 1 1 1 1.50
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 19 1
$ ICONALIG 1 1 1
$ SIGNAMES
$ ENDSIGNAMES
ENDUSE
USE btext2 AS B_17 
$ BLOCKLIB Misc_1
$ BLOCKDIM 51 1 8 3
$ TEXT "Tutorial"
$ TEXTALIG 1 1 1 1 2.00
$ ICONNAME "*** NO PIC ***"
$ ICONDIM 6 2
$ ICONALIG 1 1 1
$ SIGNAMES
$ ENDSIGNAMES
ENDUSE
USE fuzzy AS B_18 
$ BLOCKLIB Local
    kerror = 1.0;
    kderror = 1.0;
    kdeltau = 1.0;
    Tr = 0.05;
$ BLOCKDIM 30 4 8 10
$ TEXT "FPI_Regler"
$ TEXTALIG 1 2 1 1 
$ ICONNAME "fuzzy"
$ ICONDIM 5 3
$ ICONALIG 1 0 0
$ SIGNAMES
$    "deltau"
$ ENDSIGNAMES
ENDUSE

CONNECT B_2.y TO B_1.u;
$ INTERPOINTS
$ ENDINTERPOINTS
CONNECT B_18.deltau TO B_2.u;
$ INTERPOINTS
$ ENDINTERPOINTS
CONNECT B_3.y TO B_18.error;
$ INTERPOINTS
$ ENDINTERPOINTS
CONNECT B_4.y TO B_3.u;
$ INTERPOINTS
$ ENDINTERPOINTS
CONNECT B_4.y TO B_18.derror;
$ INTERPOINTS
$    19 13
$    19 4
$ ENDINTERPOINTS
CONNECT B_1.y TO B_4.u2;
$ INTERPOINTS
$    9 5
$    9 16
$    62 16
$    62 9
$ ENDINTERPOINTS
CONNECT B_5.y TO B_4.u1;
$ INTERPOINTS
$ ENDINTERPOINTS
SAVE  B_1.y B_5.y;

ENDCIRCUIT GedGen; # fuztut.ana

/* BEGIN PARAMETER */
$ FNAME        nul
$ RMODE        0
$ HMODE        1
$ MODE         0
$ IALG         6
$ INITSTEP     0.1
$ MINSTEP      1.e-12
$ MAXSTEP      1.
$ ABSERR       1.e-6
$ RELERR       1.e-6
$ LIMIT        1.e-6
$ XVAR         0
$ OSZIXAUTO    0
$ OSZIYAUTO    0
$ OSZIXSCALE   0.5
$ OSZIYSCALE   2.5
$ OSZIXOFF     0.
$ OSZIYOFF     0.
/* END PARAMETER */
